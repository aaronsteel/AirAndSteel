import os
from datetime import date
from utils import parse_file_metadata, parse_category_tags

def generate_categories():
    header = """---
title: On Site Contents (By Category)
description: "this is just another sorting for the table of contents"
date: Sept 03 2022
---

Here's the table of contents, sorted by category. It may contain duplicates if articles fit multiple categories. It's autogenerated with a script.

TODO: set up the ability to also run it automatically, on commit or build.

"""
    footer = """
    
---

index tags: Site Info, Categories, Organization, Site Map

---

category tags: Site Info

---
"""
    categories_filename = "on-site-contents-by-category.mdx"

    directory = '../posts'
    print(os.listdir(directory))

    tags_to_posts = {}

    for filename in os.listdir(directory):
        f = os.path.join(directory, filename)
        if os.path.isfile(f):
            f_tuple = parse_file_metadata(f, filename)
            f_tags = parse_category_tags(f)
            if f_tags:
                for tag in f_tags:
                    if tag not in tags_to_posts:
                        tags_to_posts[tag] = []
                    tags_to_posts[tag].append(f_tuple)

    # remove cateogires if it exists
    path_to_categories = os.path.join(directory, categories_filename)
    if os.path.exists(path_to_categories):
        os.remove(path_to_categories)
    else:
        print("categories didn't exist")

    tags_alphabetically = list(sorted(tags_to_posts.keys()))

    ordered_tags = [
        "Site Info",
        "Philosophy",
        "Resource Lists",
        "Personal Writings",
        "World History",
        "Famous Communists",
        "Modern Communists",
        "Modern Authors",
        "Media Lists",
    ]
    tag_set = set(ordered_tags)
    tag_set.add("Tweets")

    for tag in tags_alphabetically:
        if tag in tag_set: continue
        ordered_tags.append(tag)
        tag_set.add(tag)
    
    ordered_tags.append("Tweets")
    print(tags_to_posts)

    categories_file = open(path_to_categories, "w")
    categories_file.write(header)
    last_letter = "-1"
    for tag in ordered_tags:
        categories_file.write(f"## {tag}:\n\n")
        posts = sorted(tags_to_posts[tag], key=lambda x: x[1])
        post_strings = []
        for post_tuple in posts:
            title, date, desc, filename = post_tuple
            post_link = f"/posts/{filename.split('.')[0]}"
            post_strings.append(f"[{title}]({post_link}) - {date}")
        categories_file.write("\n\n".join(ps for ps in post_strings))
        categories_file.write("\n\n---\n\n")
    categories_file.write(footer)
    categories_file.close()

if __name__ == "__main__":
    generate_categories()