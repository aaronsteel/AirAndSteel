import os
from datetime import date
from utils import parse_file_metadata, parse_file_tags

def generate_index():
    header = """---
title: On Site Contents (By Topic)
description: "aka the Index"
date: Sept 03 2022
---

Here's the index, sorted by topic alphabetically. It's autogenerated with a script.

TODO: set up the ability to also run it automatically, on commit or build.
"""
    index_filename = "on-site-contents-by-topic.mdx"

    directory = '../posts'
    print(os.listdir(directory))

    tags_to_posts = {}

    # remove toc if it exists
    path_to_index = os.path.join(directory, index_filename)
    if os.path.exists(path_to_index):
        os.remove(path_to_index)
    else:
        print("index didn't exist")

    for filename in os.listdir(directory):
        f = os.path.join(directory, filename)
        if os.path.isfile(f):
            f_tuple = parse_file_metadata(f, filename)
            f_tags = parse_file_tags(f)
            if f_tags:
                for tag in f_tags:
                    if tag not in tags_to_posts:
                        tags_to_posts[tag] = []
                    tags_to_posts[tag].append(f_tuple)

    tags_alphabetically = list(sorted(tags_to_posts.keys()))


    index_file = open(path_to_index, "w")
    index_file.write(header)
    last_letter = "-1"
    for tag in tags_alphabetically:
        if tag[0].upper() != last_letter:
            last_letter = tag[0].upper()
            index_file.write(f"\n---\n\n## {last_letter}\n\n")
        index_file.write(f"{tag}: ")
        posts = sorted(tags_to_posts[tag], key=lambda x: x[1])
        post_strings = []
        for post_tuple in posts:
            title, date, desc, filename = post_tuple
            post_link = f"/posts/{filename.split('.')[0]}"
            post_strings.append(f"[{title}]({post_link}) - {date}")
        index_file.write(", ".join(ps for ps in post_strings))
        index_file.write("\n\n---\n")
    index_file.close()

if __name__ == "__main__":
    generate_index()